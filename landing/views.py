from django.shortcuts import render, redirect
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json
import random
from .forms import QuestionnaireForm
from .models import QuestionnaireResult


def index(request):
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ª–µ–Ω–¥—ñ–Ω–≥—É"""
    form = QuestionnaireForm()
    return render(request, 'landing/index.html', {'form': form})


def calculate_price_and_timeline(questionnaire_data):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∏–±–ª–∏–∑–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ —Å–∞–π—Ç—É —Ç–∞ —Ç–µ—Ä–º—ñ–Ω—ñ–≤"""
    base_price = 200  # –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞
    base_days = 1  # –ë–∞–∑–æ–≤—ñ —Ç–µ—Ä–º—ñ–Ω–∏
    
    business_sphere = questionnaire_data.get('business_sphere', '')
    main_goal = questionnaire_data.get('main_goal', '')
    priorities = questionnaire_data.get('priorities', [])
    traffic_sources = questionnaire_data.get('traffic_sources', [])
    features = questionnaire_data.get('needed_features', [])
    
    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞ —Å—Ñ–µ—Ä–æ—é –±—ñ–∑–Ω–µ—Å—É
    sphere_multipliers = {
        'goods': 1.4,  # –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å–∫–ª–∞–¥–Ω—ñ—à–∏–π
        'services': 1.1,
        'education': 1.3,  # –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π
        'personal_brand': 1.0,  # –ù–∞–π–ø—Ä–æ—Å—Ç—ñ—à–µ
        'startup': 1.5,  # –Ü–¢ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–π—Å–∫–ª–∞–¥–Ω—ñ—à–∏–π
    }
    
    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞ –≥–æ–ª–æ–≤–Ω–æ—é –º–µ—Ç–æ—é
    goal_multipliers = {
        'sales': 1.3,  # –ü—Ä–æ–¥–∞–∂—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –±—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π
        'presentation': 1.0,  # –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ—Å—Ç—ñ—à–µ
        'blog_expertise': 1.2,  # –ë–ª–æ–≥ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
        'landing_ads': 1.1,  # –õ–µ–Ω–¥—ñ–Ω–≥ –ø—ñ–¥ —Ä–µ–∫–ª–∞–º—É
    }
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    priority_multipliers = {
        'modern_design': 1.15,
        'fast_loading': 1.1,
        'seo_promotion': 1.2,
        'ai_integration': 1.4,  # –®–Ü –¥–æ–¥–∞—î –∑–Ω–∞—á–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å
        'client_simplicity': 1.05,
    }
    
    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞ –¥–∂–µ—Ä–µ–ª–∞–º–∏ —Ç—Ä–∞—Ñ—ñ–∫—É
    traffic_multipliers = {
        'instagram_tiktok': 1.1,  # –ü–æ—Ç—Ä–µ–±—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—ñ–¥ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ
        'google_seo': 1.25,  # SEO —Å–∫–ª–∞–¥–Ω—ñ—à–µ
        'referrals': 1.0,
        'email_content': 1.15,
    }
    
    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
    feature_multipliers = {
        'online_payment': 1.5,  # –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∑–Ω–∞—á–Ω–æ —É—Å–∫–ª–∞–¥–Ω—é—î
        'contact_form': 1.1,
        'blog': 1.2,
        'calendar_booking': 1.3,  # –ö–∞–ª–µ–Ω–¥–∞—Ä —Å–∫–ª–∞–¥–Ω–∏–π
        'other': 1.1,  # –Ü–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏
    }
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ—ó —Ü—ñ–Ω–∏
    price = base_price
    days = base_days
    
    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º–Ω–æ–∂–Ω–∏–∫–∏
    price *= sphere_multipliers.get(business_sphere, 1.0)
    price *= goal_multipliers.get(main_goal, 1.0)
    
    # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏
    for priority in priorities:
        price *= priority_multipliers.get(priority, 1.0)
        if priority in ['ai_integration', 'seo_promotion']:
            days += 1  # –°–∫–ª–∞–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ–¥–∞—é—Ç—å –¥–µ–Ω—å
    
    # –î–∂–µ—Ä–µ–ª–∞ —Ç—Ä–∞—Ñ—ñ–∫—É
    for source in traffic_sources:
        price *= traffic_multipliers.get(source, 1.0)
        if source == 'google_seo':
            days += 1  # SEO –¥–æ–¥–∞—î –¥–µ–Ω—å
    
    # –§—É–Ω–∫—Ü—ñ—ó
    for feature in features:
        price *= feature_multipliers.get(feature, 1.0)
        if feature in ['online_payment', 'calendar_booking']:
            days += 1  # –°–∫–ª–∞–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ–¥–∞—é—Ç—å –¥–µ–Ω—å
    
    # –û–±–º–µ–∂—É—î–º–æ —Ü—ñ–Ω—É –≤ –º–µ–∂–∞—Ö $200-500
    price = max(200, min(500, price))
    
    # –¢–µ—Ä–º—ñ–Ω–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —Å–∞–π—Ç—É
    if main_goal == 'landing_ads':
        days = 2  # –õ–µ–Ω–¥—ñ–Ω–≥ —à–≤–∏–¥—à–µ
    else:
        days = 3  # –Ü–Ω—à—ñ —Ç–∏–ø–∏ —Å–∞–π—Ç—ñ–≤
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–Ω—ñ –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    if business_sphere in ['goods', 'startup']:
        days = min(days + 1, 3)  # –ú–∞–∫—Å–∏–º—É–º 3 –¥–Ω—ñ
    
    if 'ai_integration' in priorities or 'online_payment' in features:
        days = min(days + 1, 3)  # –ú–∞–∫—Å–∏–º—É–º 3 –¥–Ω—ñ
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ü—ñ–Ω–∏ —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –Ω–∞ "9" –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö —Ü—ñ–Ω –≤—ñ–¥ 209 –¥–æ 499 –∑ –∫—Ä–æ–∫–æ–º 10 (–≤—Å—ñ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –Ω–∞ 9)
    possible_prices = [209, 219, 229, 239, 249, 259, 269, 279, 289, 299, 
                      309, 319, 329, 339, 349, 359, 369, 379, 389, 399,
                      409, 419, 429, 439, 449, 459, 469, 479, 489, 499]
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—É —Ü—ñ–Ω—É —â–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ "9"
    target_price = max(209, min(499, price))  # –û–±–º–µ–∂—É—î–º–æ –≤ –º–µ–∂–∞—Ö 209-499
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—É —Ü—ñ–Ω—É –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É
    closest_price = min(possible_prices, key=lambda x: abs(x - target_price))
    price = closest_price
    
    return round(price, 0), days


def generate_personalized_result(questionnaire_data, price, days):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
    business_sphere = questionnaire_data.get('business_sphere', '')
    main_goal = questionnaire_data.get('main_goal', '')
    priorities = questionnaire_data.get('priorities', [])
    traffic_sources = questionnaire_data.get('traffic_sources', [])
    features = questionnaire_data.get('needed_features', [])
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
    functionality_map = {
        'goods': ['–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤', '–ö–æ—à–∏–∫', '–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏', '–§—ñ–ª—å—Ç—Ä–∏ –ø–æ—à—É–∫—É'],
        'services': ['–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ —Ä–æ–±—ñ—Ç', '–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏', '–û–ø–∏—Å –ø–æ—Å–ª—É–≥', '–í—ñ–¥–≥—É–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤'],
        'education': ['–ö–∞—Ç–∞–ª–æ–≥ –∫—É—Ä—Å—ñ–≤', '–°–∏—Å—Ç–µ–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó', '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç', '–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏'],
        'personal_brand': ['–ü—Ä–æ –º–µ–Ω–µ', '–ü–æ—Ä—Ç—Ñ–æ–ª—ñ–æ', '–ë–ª–æ–≥', '–ö–æ–Ω—Ç–∞–∫—Ç–∏'],
        'startup': ['–û–ø–∏—Å –ø—Ä–æ–¥—É–∫—Ç—É', '–î–µ–º–æ –≤–µ—Ä—Å—ñ—è', '–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–∏–Ω–∏', '–Ü–Ω–≤–µ—Å—Ç–æ—Ä–∏'],
    }
    
    functionality = functionality_map.get(business_sphere, ['–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞', '–ü—Ä–æ –Ω–∞—Å', '–ö–æ–Ω—Ç–∞–∫—Ç–∏'])
    
    # –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–∏—Ö
    if 'online_payment' in features:
        functionality.append('–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞')
    if 'contact_form' in features:
        functionality.append('–§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –∑ –∞–≤—Ç–æemail')
    if 'blog' in features:
        functionality.append('–ë–ª–æ–≥ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π')
    if 'calendar_booking' in features:
        functionality.append('–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—É')
    if 'other' in features:
        functionality.append('–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞ –≤–∞—à–∏–º–∏ –ø–æ—Ç—Ä–µ–±–∞–º–∏')
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å—Ç–∏–ª—é
    style_map = {
        'goods': '–°—É—á–∞—Å–Ω–∏–π e-commerce –¥–∏–∑–∞–π–Ω –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ç–æ–≤–∞—Ä–∏',
        'services': '–ï–ª–µ–≥–∞–Ω—Ç–Ω–∏–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∏–π —Å—Ç–∏–ª—å –∑ –ø–æ—Ä—Ç—Ñ–æ–ª—ñ–æ',
        'education': '–û—Å–≤—ñ—Ç–Ω—ñ–π –¥–∏–∑–∞–π–Ω –∑ —è—Å–∫—Ä–∞–≤–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
        'personal_brand': '–ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å',
        'startup': '–Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–π tech –¥–∏–∑–∞–π–Ω –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞–º–∏',
    }
    
    style = style_map.get(business_sphere, '–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å—É—á–∞—Å–Ω–∏–π –¥–∏–∑–∞–π–Ω')
    
    if 'modern_design' in priorities:
        style += ' –∑ —Å—É—á–∞—Å–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏'
    if 'client_simplicity' in priorities:
        style += ' –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è'
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π
    integrations = []
    
    if 'instagram_tiktok' in traffic_sources:
        integrations.append('–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Instagram —Ç–∞ TikTok')
    if 'google_seo' in traffic_sources:
        integrations.append('Google Analytics —Ç–∞ Search Console')
    if 'email_content' in traffic_sources:
        integrations.append('Email –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ (MailChimp/SendGrid)')
    
    if 'ai_integration' in priorities:
        integrations.append('–®–Ü —á–∞—Ç-–±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π')
        integrations.append('–®–Ü –∞–Ω–∞–ª—ñ–∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
    
    if 'online_payment' in features:
        integrations.append('–ü–ª–∞—Ç—ñ–∂–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ (LiqPay, Fondy)')
    
    if 'seo_promotion' in priorities:
        integrations.append('SEO –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å')
    
    if not integrations:
        integrations = ['–ë–∞–∑–æ–≤—ñ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —Å–æ—Ü–º–µ—Ä–µ–∂–∞–º–∏', 'Google Analytics']
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    recommendations = []
    
    if business_sphere == 'goods':
        recommendations.append('üõí –î–æ–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∑–Ω–∏–∂–æ–∫ —Ç–∞ –∞–∫—Ü—ñ–π –¥–ª—è –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—ñ–≤')
        recommendations.append('üìä –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–Ω–≤–µ—Ä—Å—ñ–π')
    elif business_sphere == 'services':
        recommendations.append('‚≠ê –î–æ–¥–∞–π—Ç–µ —Å–µ–∫—Ü—ñ—é –≤—ñ–¥–≥—É–∫—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –¥–æ–≤—ñ—Ä–∏')
        recommendations.append('üìû –°—Ç–≤–æ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É —Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π')
    elif business_sphere == 'education':
        recommendations.append('üéì –†–æ–∑—Ä–æ–±—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤')
        recommendations.append('üí¨ –î–æ–¥–∞–π—Ç–µ —Ñ–æ—Ä—É–º –∞–±–æ —á–∞—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è')
    elif business_sphere == 'personal_brand':
        recommendations.append('üìù –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ –±–ª–æ–≥ –¥–ª—è SEO')
        recommendations.append('üéØ –°—Ç–≤–æ—Ä—ñ—Ç—å –ª—ñ–¥-–º–∞–≥–Ω—ñ—Ç –¥–ª—è –∑–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤')
    elif business_sphere == 'startup':
        recommendations.append('üöÄ –î–æ–¥–∞–π—Ç–µ landing page –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—É')
        recommendations.append('üìà –ù–∞–ª–∞—à—Ç—É–π—Ç–µ A/B —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è')
    
    if main_goal == 'sales':
        recommendations.append('üí∞ –û–ø—Ç–∏–º—ñ–∑—É–π—Ç–µ –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂—ñ–≤')
    if main_goal == 'presentation':
        recommendations.append('üé® –ó—Ä–æ–±—ñ—Ç—å –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≤—ñ–∑—É–∞–ª—å–Ω—ñ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó')
    
    if 'fast_loading' in priorities:
        recommendations.append('‚ö° –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ 2 —Å–µ–∫—É–Ω–¥')
    
    return {
        'functionality': '\n'.join(f'‚Ä¢ {item}' for item in functionality),
        'style': style,
        'integrations': '\n'.join(f'‚Ä¢ {item}' for item in integrations),
        'recommendations': recommendations
    }


@csrf_exempt
@require_http_methods(["POST"])
def process_questionnaire(request):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –æ–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    try:

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ POST
        if request.content_type == 'application/json':
            data = json.loads(request.body)
        else:
            data = request.POST.dict()
            # –û–±—Ä–æ–±–ª—è—î–º–æ checkbox fields
            data['priorities'] = request.POST.getlist('priorities_selected')
            data['traffic_sources'] = request.POST.getlist('traffic_sources_selected')
            data['needed_features'] = request.POST.getlist('features_selected')
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º—É —Ç—ñ–ª—å–∫–∏ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
        form_data = {k: v for k, v in data.items() if k not in ['priorities', 'traffic_sources', 'needed_features']}
        form = QuestionnaireForm(form_data)

        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –≤—Ä—É—á–Ω—É
        if not data.get('business_sphere') or not data.get('main_goal'):
            return JsonResponse({
                'success': False,
                'error': '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ñ–µ—Ä—É –±—ñ–∑–Ω–µ—Å—É —Ç–∞ –≥–æ–ª–æ–≤–Ω—É –º–µ—Ç—É'
            })
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–æ—Ä–º—É –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ name/email –ø–æ—Ä–æ–∂–Ω—ñ
        if form.is_valid() or not any(field in form.errors for field in ['business_sphere', 'main_goal']):
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
            questionnaire_data = {
                'business_sphere': data.get('business_sphere'),
                'main_goal': data.get('main_goal'),
                'priorities': data.get('priorities', []),
                'traffic_sources': data.get('traffic_sources', []),
                'needed_features': data.get('needed_features', [])
            }
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω–∏ —Ç–∞ —Ç–µ—Ä–º—ñ–Ω—ñ–≤
            calculated_price, estimated_days = calculate_price_and_timeline(questionnaire_data)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            personalized_result = generate_personalized_result(
                questionnaire_data, calculated_price, estimated_days
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ä—É—á–Ω—É, –æ—Å–∫—ñ–ª—å–∫–∏ —Ñ–æ—Ä–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–ø–æ–≤–Ω–æ—é
            result = QuestionnaireResult(
                name=data.get('name', '–ê–Ω–æ–Ω—ñ–º–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'),
                email=data.get('email', 'noemail@example.com'),
                phone=data.get('phone', ''),
                business_sphere=data.get('business_sphere'),
                main_goal=data.get('main_goal'),
                priorities=data.get('priorities', []),
                traffic_sources=data.get('traffic_sources', []),
                needed_features=data.get('needed_features', []),
                estimated_price=calculated_price,
                estimated_days=estimated_days,
                functionality=personalized_result['functionality'],
                style=personalized_result['style'],
                integrations=personalized_result['integrations'],
                recommendations='\n'.join(personalized_result['recommendations'])
            )
            result.save()
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response_data = {
                'success': True,
                'estimated_price': int(calculated_price),
                'estimated_days': estimated_days,
                'functionality': personalized_result['functionality'],
                'style': personalized_result['style'],
                'integrations': personalized_result['integrations'],
                'recommendations': personalized_result['recommendations'],
                'result_id': result.id,
            }
            
            return JsonResponse(response_data)
        else:
            return JsonResponse({
                'success': False,
                'errors': form.errors
            })
            
    except Exception as e:

        return JsonResponse({
            'success': False,
            'error': str(e)
        })


def result_page(request, result_id):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    try:
        result = QuestionnaireResult.objects.get(id=result_id)
        recommendations_list = result.recommendations.split('\n') if result.recommendations else []
        
        context = {
            'result': result,
            'recommendations': recommendations_list,
        }
        return render(request, 'landing/result.html', context)
    except QuestionnaireResult.DoesNotExist:
        return redirect('landing_page')


@require_http_methods(["POST"])
def submit_contact(request):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
        contact_name = request.POST.get('name', '').strip()
        telegram_instagram = request.POST.get('telegram_instagram', '').strip()
        contact_phone = request.POST.get('phone', '').strip()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
        estimated_price = request.POST.get('estimated_price', '')
        estimated_days = request.POST.get('estimated_days', '')
        functionality = request.POST.get('functionality', '')
        style = request.POST.get('style', '')
        integrations = request.POST.get('integrations', '')
        recommendations = request.POST.get('recommendations', '')
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if not contact_name or not telegram_instagram:
            return JsonResponse({
                'success': False,
                'error': '–Ü–º\'—è —Ç–∞ telegram/instagram —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏ –ø–æ–ª—è–º–∏'
            })
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è telegram/instagram —Ñ–æ—Ä–º–∞—Ç—É
        import re
        if not re.match(r'^@[a-zA-Z0-9_]{3,}$', telegram_instagram):
            return JsonResponse({
                'success': False,
                'error': '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π @telegram –∞–±–æ @instagram –Ω—ñ–∫–Ω–µ–π–º'
            })
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É (—è–∫—â–æ –≤–≤–µ–¥–µ–Ω–∏–π)
        if contact_phone and not re.match(r'^\+38\(\d{3}\) \d{3}-\d{2}-\d{2}$', contact_phone):
            return JsonResponse({
                'success': False,
                'error': '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +38(0__) ___-__-__'
            })
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        # –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email/–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        
        # –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ –¥–∞–Ω—ñ
        contact_data = {
            'name': contact_name,
            'telegram_instagram': telegram_instagram,
            'phone': contact_phone,
            'estimated_price': estimated_price,
            'estimated_days': estimated_days,
            'functionality': functionality,
            'style': style,
            'integrations': integrations,
            'recommendations': recommendations
        }
        print(f"–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞: {contact_data}")
        
        # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ Telegram –∞–±–æ email
        # send_telegram_notification(contact_data)
        # send_email_notification(contact_data)
        
        return JsonResponse({
            'success': True,
            'message': '–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.'
        })
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏: {e}")
        return JsonResponse({
            'success': False,
            'error': '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
        })
